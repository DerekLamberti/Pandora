The unit++ framework is meant to be very simple.

To install it:
  ./configure
  make install

This should take care of everything, and install in
/usr/local/{lib,include,man}.

The all target (make all) will make the test for the test framework, unit++.
Try to run it to see that everything is fine. If you want to see a failing
test case, try `unit++ -f'.

Graphics
--------

My experience from junit are that a really great day ends with my test suite
producing that green bar... To gain that joy in C++ I have made a GUI for
unit++ based on Qt. However, it does take longer to run the unGUI version, and
I have therefore taken great care that this will still work without it.

The install instructions for the GUI version is:
  ./configure --with-qt
  make install

This will enable the gui, that is add the GUI classes to the unit++ library.
It still requires that the individual test programs enables the GUI. This is
done by adding the following lines to one of the test modules:

#include <unit++/unit++.h>
unitpp::gui_hook ghook;

This will enable the -g (or --gui) option in the resulting executable.

NOTE:
=====
The tests don't work properly on old C++ compilers, without the <sstream>
header (stringstream classes). That includes the g++ 2.95.3 version found on
SunOS and OpenBSD. However, newer versions of libstd++3 works fine.

This means that some things will not be tested in this case, and some
spurious output will result from running the unit++ program. The final count
of tests is correct, even though the output strongly suggests otherwise.
====

Doc.
----
If you have doc++ available the API interface can be documented by `make
doc'. The DOCDIR variable in the Makefile controls where the files end up.

If you want the documentation without having doc++, I try to keep it update
on the SourceForge page: http://unitpp.sourceforge.net/docs/index.html.

It can be found as a file for download there as well.

Man pages
---------
I have added a man page for unit++(3). This documents the API to a level that
I deem sufficient for writing test cases.
